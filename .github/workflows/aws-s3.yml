# This workflow gets triggered for push event in main branch

name: Deploy Hugo Blog to Amazon S3

on:
  workflow_dispatch: # manual trigger
  push:
    branches: ['main']

env:
  AWS_REGION: us-east-1 # set this to your preferred AWS region, e.g. us-west-1
  AWS_ACCOUNT: 879381279300 # set this to your account number
  BUCKET_NAME: techblog.riosr.com # set this to your S3 bucket name
  CDK_ROLE_NAME: GitHubCdkRole # set this to your IAM Role name
  S3_ROLE_NAME: GitHubS3Role # set this to your IAM Role name
  DIST_ID: E3J9RG9DSQTG4A # set this to your CloudFront Distribution ID

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  infra:
    name: CDK
    runs-on: ubuntu-latest

    # s3 bucket name and cloudfront distribution id are stored as outputs
    # and will be passed to the deploy job
    outputs:
      s3_bucket: ${{steps.cdk_out.outputs.s3}}
      cf_id: ${{steps.cdk_out.outputs.cfid}}
      iam_role: ${{steps.cdk_out.outputs.role}}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT}}:role/${{env.CDK_ROLE_NAME}}
          role-session-name: github-session-cdk
      
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install AWS CDK
        run: |
          cd cdk
          npm i -g aws-cdk
          npm install
      
      - name: Synth stack
        run: |
          cd cdk
          cdk synth
      
      # - name: Diff stack
      #   run: |
      #     cd cdk
      #     cdk diff

      - name: Deploy stack
        run: |
          cd cdk
          cdk deploy --all --require-approval never
      
      - name: Outputs
        id: cdk_out
        run: |
          echo "s3=$(aws cloudformation describe-stacks --stack-name CdkStack --query "Stacks[0].Outputs[?OutputKey=='BlogBucketName'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
          echo "cfid=$(aws cloudformation describe-stacks --stack-name CdkStack --query "Stacks[0].Outputs[?OutputKey=='BlogDistributionId'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
          echo "role=$(aws cloudformation describe-stacks --stack-name CdkStack --query "Stacks[0].Outputs[?OutputKey=='GitHubS3RoleName'].OutputValue" --output text)" >> "$GITHUB_OUTPUT"
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: infra

    steps:
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: tech-blog
          path: public/*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT}}:role/${{env.S3_ROLE_NAME}}
          role-session-name: github-session-s3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: tech-blog
          path: public # GitHub Actions no longer adds an extra root directory to the downloaded archive, need to manually specify it

      - name: Deploy blog to S3
        run: |
          aws s3 sync public/ s3://${{env.BUCKET_NAME}} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{env.DIST_ID}} --paths "/*"
